Can big data improve public policy analysis? 
ABSTRACT We conduct a systematic review targeting the idea of whether big data can improve public policy analysis. The ideas about the benefits and risks of applying big data technologies on public policy analysis are summarized. Big data can provide accurate, proactive, and participatory policy analysis but at the same time it raises risks in data privacy, data misuse and bias, and inequality. We then examine the detailed implementation of big data in each public policy stage. The experiments or practical applications from the relevant literature demonstrate how exactly big data is used to improve policy analysis. This study will guide governments on adopting big data for public policy analysis

Problem Formulation and Fairness
Formulating data science problems is an uncertain and difficult process. It requires various forms of discretionary work to translate high-level objectives or strategic goals into tractable problems, necessitating, among other things, the identification of appropriate target variables and proxies. While these choices are rarely self-evident, normative assessments of data science projects often take them for granted, even though different translations can raise profoundly different ethical concerns. Whether we consider a data science project fair often has as much to do with the formulation of the problem as any property of the resulting model. Building on six months of ethnographic fieldwork with a corporate data science team---and channeling ideas from sociology and history of science, critical data studies, and early writing on knowledge discovery in databases---we describe the complex set of actors and activities involved in problem formulation. Our research demonstrates that the specification and operationalization of the problem are always negotiated and elastic, and rarely worked out with explicit normative considerations in mind. In so doing, we show that careful accounts of everyday data science work can help us better understand how and why data science problems are posed in certain ways---and why specific formulations prevail in practice, even in the face of what might seem like normatively preferable alternatives. We conclude by discussing the implications of our findings, arguing that effective normative interventions will require attending to the practical work of problem formulation.

Finding flows in software devlopment
Nowadays, many developers lose their passions for software development. Flow is a theory to describe experience associated with optimal performance. In this article, I analyzed essential components of flow and their meanings for software developers. I also made recommendations on the fields of study where flow can be made. Keywords Software development, software developer, flow 1. Joe’s Complaints Recently my friend Joe called me. Joe has been working as a contractor in a large utility company for about two years; at the end of this year, he has to choose to either become full-time or leave the company. "Job market is so bad and I have no other choice", he was very sad about becoming full-time. He told me, "You never know how slow the process it is here! Extremely slow! If you get one assignment, your boss may check the status in half a year." He later added, "Do you know what the requirement is to work here? Only PLSQL! You don't need to learn anything else before you retire. … Anyway, I am busy with my kids after work all the time… " I felt sad when I heard that.  The phone call made me to think a lot. Unlike him, I am working in a software company that is rarely to find in this city full with other industries. I feel lucky about this.  However, when I look around my past and current software developer colleagues, I see so many Joes: they are intelligent, working hard, but, not happy.  Many of them had passions for software development before, like Joe, but they are losing the passions now. 2. Mike’s Passion The good thing is there is an exception.  His name is Mike. He never loses his passion. Mike started as a developer working with me eight years ago and now is the architect of the whole development team. He has true love for developing high-quality software products. He keeps himself away from all sorts of distractions; even when he is not at office, his contributions keep coming, at night and at weekends. He must have found so much joy in 
work. I never see him worried or complained. He is happy all the time. After I knew him well, I found out it just happened so naturally to him. Work is part of his life, wherever and whenever. For years I hold the belief that his love for software development came with him because of his personality. No training can ever build such a love. 3. It’s Flow! My belief changed when I came across some books [1][2] written by Mihaly Csikszentmihalyi. The concept proposed by Mihaly is called Flow. Here’s the definition from Wikipedia -- "Flow is the mental state of operation in which the person is fully immersed in what he or she is doing by a feeling of energized focus, full involvement, and success in the process of the activity." [3] Flows happen in our lives. There are short-term flows and long-term flows. Everyone has experienced short-term flows, e.g. watching an exciting movie. Each software developer must have experienced the joy of resolving a challenging task after hard and creative work -- that is flow. Now I know the term to describe Mike, he is in flow! What makes Mike different from other developers is that Mike keeps himself always in flow. He found a long-term flow. In flow theory, long-term flows can be reached by study. In this article we are investigating what are required for flows to happen in software development. 4

Composing knowledge fragments: a next generation ide
When building a software system, software developers each contribute a flow of information that together forms the system. As they work, programmers continuously consult various facts (knowledge) about this information to answer their questions about the system. The knowledge most easily accessed today in a programming environment involves facts about the structure of the program. However, the knowledge required by a programmer is broader than just structure; it also includes knowledge about design, requirements, and the development process, to name just a few other sources. To enable developers to access this knowledge more efficiently, our goal is to develop a model for programming environments that allows various fragments of different kinds of knowledge to be configured flexibly. This model would enable new presentations to show these knowledge fragments in ways that more directly answer programmers' questions.

How can research about software developers generalize?
Research that studies software developers can have a larger impact when its results generalize to other contexts. However, it is often unclear if, how, and why such results generalize. In this position paper, we aim to motivate software engineering researchers to generalize their findings. To meet this aim, we firstly enumerate the dimensions in which software engineering generalizations are made, and secondly, propose several practical ways researchers can make their work more generalizable. In meeting our aim, we hope to help the software engineering research community maximize their impact outside of software engineering.
